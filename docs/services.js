import{db,saveDb}from"./db.js";import{showPatientRegistrationModal}from"./patients.js";db.serviceEntries||(db.serviceEntries={});export function renderServiceVisitSelector(e){const t=db.currentUser,i=db.registers.filter(e=>!e.assignedUsers||0===e.assignedUsers.length||t&&e.assignedUsers.includes(t.username));e.innerHTML=`\n    <div class="container my-4">\n      <div class="d-flex align-items-center justify-content-between mb-2">\n        <h4><i class="bi bi-clipboard-plus"></i> Service Data Capture</h4>\n      </div>\n      <form id="visitSelectForm" class="row g-2 mb-3">\n        <div class="col-md-3">\n          <input type="text" class="form-control" id="patientSearch" placeholder="Patient ID or Name" required>\n        </div>\n        <div class="col-md-3">\n          <select class="form-select" id="serviceType" required>\n            <option value="">Select Register/Service</option>\n            ${i.map(e=>`<option>${e.name}</option>`).join("")}\n          </select>\n        </div>\n        <div class="col-md-3">\n          <input type="date" class="form-control" id="visitDate" value="${(new Date).toISOString().slice(0,10)}" required>\n        </div>\n        <div class="col-md-3">\n          <button class="btn btn-primary w-100"><i class="bi bi-check2"></i> Start Entry</button>\n        </div>\n      </form>\n      <div id="foundPatient"></div>\n      <div id="svcMsg"></div>\n      <a href="#admin-dashboard" class="btn btn-link mt-2"><i class="bi bi-arrow-left"></i> Back</a>\n    </div>\n  `;let a=null;const n=e.querySelector("#patientSearch");n.oninput=function(){const t=this.value.trim().toLowerCase();a=db.patients.find(e=>e.patientID?.toLowerCase()===t||e.name?.toLowerCase()===t);const i=e.querySelector("#foundPatient");a?i.innerHTML=`<div class="alert alert-success">Found: <b>${a.name}</b> [${a.patientID}]</div>`:t.length>2?(i.innerHTML='<div class="alert alert-warning">No patient found. <button class="btn btn-sm btn-outline-primary" id="addPatBtn"><i class="bi bi-person-plus"></i> Register New Patient</button></div>',e.querySelector("#addPatBtn").onclick=()=>showPatientRegistrationModal({prefillName:t,onSave:e=>{a=e,n.value=e.patientID,n.dispatchEvent(new Event("input"))}})):i.innerHTML=""},e.querySelector("#visitSelectForm").onsubmit=function(t){if(t.preventDefault(),!a)return void(e.querySelector("#svcMsg").innerHTML='<div class="alert alert-danger">Select or register a patient first.</div>');const i={patientID:a.patientID,patientName:a.name,dob:a.dob,age:a.age,visitDate:this.visitDate.value,serviceType:this.serviceType.value,timestamp:Date.now()};renderServiceEntry(e,i)}}function generatePatientID(){return"P"+Date.now()%1e6}function calculateAge(e){if(!e)return"";const t=Date.now()-new Date(e).getTime();return Math.floor(t/315576e5)}export function renderServiceEntry(container,visit=null){if(!visit)return renderServiceVisitSelector(container);db.facility||(db.facility={}),db.patients||(db.patients=[]),db.serviceEntries||(db.serviceEntries={}),db.registers||(db.registers=[]);const reg=db.registers.find(e=>e.name===visit.serviceType);if(!reg)return void(container.innerHTML='<div class="alert alert-danger">Register not found!</div>');const entries=db.serviceEntries[reg.name]||[];let prev=entries.find(e=>e.patientID===visit.patientID&&e.visitID===visit.timestamp);container.innerHTML=`\n    <div class="container my-4">\n      <div class="d-flex align-items-center justify-content-between mb-2">\n        <h4><i class="bi bi-clipboard-plus"></i> ${reg.name} Data Entry</h4>\n      </div>\n      <div class="card shadow">\n        <div class="card-body">\n          <div class="mb-3 small text-muted">\n            <b>Facility:</b> ${db.facility.name} &mdash; <b>Patient:</b> ${visit.patientName} (${visit.patientID}) &mdash; <b>Date:</b> ${visit.visitDate}\n          </div>\n          <form id="serviceForm" autocomplete="off"></form>\n        </div>\n      </div>\n      <a href="#visit-log" class="btn btn-link mt-2"><i class="bi bi-arrow-left"></i> Back</a>\n      <div id="serviceMsg"></div>\n      <div id="lineList"></div>\n    </div>\n  `,setTimeout(()=>{const form=container.querySelector("#serviceForm");form.innerHTML=reg.fields.map((e,t)=>renderFieldInput(e,prev?.formData?.[e.name],visit)).join("")+'<div class="mt-3"><button class="btn btn-primary"><i class="bi bi-save"></i> Save Record</button></div>',reg.fields.forEach(e=>{["date","datetime"].includes(e.type)&&(form.querySelector(`#f_${e.name}`).max=(new Date).toISOString().slice(0,10)),"image"===e.type&&(form.querySelector(`#f_${e.name}`).onchange=function(t){if(this.files&&this.files[0]){const t=URL.createObjectURL(this.files[0]);let i=form.querySelector(`#prev_${e.name}`);i||(i=document.createElement("img"),i.id=`prev_${e.name}`,i.style.maxWidth="70px",i.style.marginTop="5px",this.parentNode.appendChild(i)),i.src=t}}),"file"===e.type&&(form.querySelector(`#f_${e.name}`).onchange=function(t){let i=form.querySelector(`#prev_${e.name}`);i||(i=document.createElement("span"),i.id=`prev_${e.name}`,i.style.marginLeft="5px",this.parentNode.appendChild(i)),i.textContent=this.files[0]?.name||""})}),form.onsubmit=function(e){e.preventDefault();const formData={};let valid=!0;for(const f of reg.fields){let val=form[`f_${f.name}`];if(val&&(["image","file"].includes(f.type)?formData[f.name]=val.files&&val.files[0]?val.files[0].name:"":["select_multiple"].includes(f.type)?formData[f.name]=Array.from(val.selectedOptions).map(e=>e.value).join(", "):(["geo"].includes(f.type),formData[f.name]=val.value),f.required&&!formData[f.name]?(valid=!1,val.classList.add("is-invalid")):val.classList.remove("is-invalid"),["date","datetime"].includes(f.type)&&formData[f.name]&&formData[f.name]>(new Date).toISOString().slice(0,10)&&(valid=!1,val.classList.add("is-invalid")),f.constraint&&formData[f.name]&&f.constraint.split(",").forEach(e=>{let[t,i]=e.split("=");"min"===t&&parseFloat(formData[f.name])<parseFloat(i)&&(valid=!1),"max"===t&&parseFloat(formData[f.name])>parseFloat(i)&&(valid=!1),"regex"!==t||new RegExp(i).test(formData[f.name])||(valid=!1)}),"calculate"===f.type&&f.calc)){let formula=f.calc;Object.keys(formData).forEach(e=>{formula=formula.replaceAll(e,formData[e])});try{formData[f.name]=eval(formula)}catch{}}}if(!valid)return void(container.querySelector("#serviceMsg").innerHTML='<div class="alert alert-danger mt-2">Please fill all required/valid fields correctly.</div>');db.serviceEntries[reg.name]||(db.serviceEntries[reg.name]=[]);const existing=db.serviceEntries[reg.name].find(e=>e.patientID===visit.patientID&&e.visitID===visit.timestamp),entry={patientID:visit.patientID,patientName:visit.patientName,visitID:visit.timestamp,visitDate:visit.visitDate,serviceType:reg.name,facility:db.facility.name,user:db.currentUser?.username||"",age:visit.age,formData:formData,savedAt:Date.now()};existing?Object.assign(existing,entry):db.serviceEntries[reg.name].push(entry),saveDb(),container.querySelector("#serviceMsg").innerHTML='<div class="alert alert-success mt-2">Service record saved! Visit logged.</div>',form.reset(),renderLineList(container,reg.name)},renderLineList(container,reg.name)},0);const form=container.querySelector("#serviceForm");form.innerHTML=reg.fields.map((e,t)=>renderFieldInput(e,prev?.formData?.[e.name],visit)).join("")+'<div class="mt-3"><button class="btn btn-primary"><i class="bi bi-save"></i> Save Record</button></div>',reg.fields.forEach(e=>{["date","datetime"].includes(e.type)&&(form.querySelector(`#f_${e.name}`).max=(new Date).toISOString().slice(0,10)),"image"===e.type&&(form.querySelector(`#f_${e.name}`).onchange=function(t){if(this.files&&this.files[0]){const t=URL.createObjectURL(this.files[0]);let i=form.querySelector(`#prev_${e.name}`);i||(i=document.createElement("img"),i.id=`prev_${e.name}`,i.style.maxWidth="70px",i.style.marginTop="5px",this.parentNode.appendChild(i)),i.src=t}}),"file"===e.type&&(form.querySelector(`#f_${e.name}`).onchange=function(t){let i=form.querySelector(`#prev_${e.name}`);i||(i=document.createElement("span"),i.id=`prev_${e.name}`,i.style.marginLeft="5px",this.parentNode.appendChild(i)),i.textContent=this.files[0]?.name||""})}),form.onsubmit=function(e){e.preventDefault();const formData={};let valid=!0;for(const f of reg.fields){let val=form[`f_${f.name}`];if(val&&(["image","file"].includes(f.type)?formData[f.name]=val.files&&val.files[0]?val.files[0].name:"":["select_multiple"].includes(f.type)?formData[f.name]=Array.from(val.selectedOptions).map(e=>e.value).join(", "):(["geo"].includes(f.type),formData[f.name]=val.value),f.required&&!formData[f.name]?(valid=!1,val.classList.add("is-invalid")):val.classList.remove("is-invalid"),["date","datetime"].includes(f.type)&&formData[f.name]&&formData[f.name]>(new Date).toISOString().slice(0,10)&&(valid=!1,val.classList.add("is-invalid")),f.constraint&&formData[f.name]&&f.constraint.split(",").forEach(e=>{let[t,i]=e.split("=");"min"===t&&parseFloat(formData[f.name])<parseFloat(i)&&(valid=!1),"max"===t&&parseFloat(formData[f.name])>parseFloat(i)&&(valid=!1),"regex"!==t||new RegExp(i).test(formData[f.name])||(valid=!1)}),"calculate"===f.type&&f.calc)){let formula=f.calc;Object.keys(formData).forEach(e=>{formula=formula.replaceAll(e,formData[e])});try{formData[f.name]=eval(formula)}catch{}}}if(!valid)return void(container.querySelector("#serviceMsg").innerHTML='<div class="alert alert-danger mt-2">Please fill all required/valid fields correctly.</div>');db.serviceEntries[reg.name]||(db.serviceEntries[reg.name]=[]);const existing=db.serviceEntries[reg.name].find(e=>e.patientID===visit.patientID&&e.visitID===visit.timestamp),entry={patientID:visit.patientID,patientName:visit.patientName,visitID:visit.timestamp,visitDate:visit.visitDate,serviceType:reg.name,facility:db.facility.name,user:db.currentUser?.username||"",age:visit.age,formData:formData,savedAt:Date.now()};existing?Object.assign(existing,entry):db.serviceEntries[reg.name].push(entry),saveDb(),container.querySelector("#serviceMsg").innerHTML='<div class="alert alert-success mt-2">Service record saved!</div>',form.reset(),renderLineList(container,reg.name)},renderLineList(container,reg.name)}function renderLineList(e,t){const i=db.serviceEntries[t]||[];if(!i.length)return void(e.querySelector("#lineList").innerHTML='<div class="alert alert-info mt-3">No records yet for this register.</div>');const a=db.registers.find(e=>e.name===t),n=a?a.fields.map(e=>e.name):[];e.querySelector("#lineList").innerHTML=`\n    <div class="table-responsive mt-4">\n      <table class="table table-bordered table-sm">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Patient</th>\n            <th>User</th>\n            ${n.map(e=>`<th>${e}</th>`).join("")}\n          </tr>\n        </thead>\n        <tbody>\n          ${i.slice(-20).reverse().map(e=>`\n            <tr>\n              <td>${e.visitDate||""}</td>\n              <td>${e.patientName||""} (${e.patientID||""})</td>\n              <td>${e.user||""}</td>\n              ${n.map(t=>`<td>${e.formData?.[t]||""}</td>`).join("")}\n            </tr>\n          `).join("")}\n        </tbody>\n      </table>\n      <div class="small text-muted">Showing last 20 records</div>\n    </div>\n  `}function renderFieldInput(e,t="",i){const a=(new Date).toISOString().slice(0,10);let n=t||e.default||"";switch(e.name.toLowerCase().includes("age")&&i&&i.dob&&(n=i.age||""),e.type){case"text":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="text" class="form-control" id="f_${e.name}" value="${n}"></div>`;case"number":case"integer":case"decimal":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="number" class="form-control" id="f_${e.name}" value="${n}" ${"integer"===e.type?'step="1"':""}></div>`;case"date":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="date" class="form-control" id="f_${e.name}" value="${n}" max="${a}"></div>`;case"time":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="time" class="form-control" id="f_${e.name}" value="${n}"></div>`;case"datetime":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="datetime-local" class="form-control" id="f_${e.name}" value="${n}" max="${a}"></div>`;case"select_one":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <select class="form-select" id="f_${e.name}">${(e.choices||"").split(",").map(e=>`<option value="${e.trim()}"${n===e.trim()?" selected":""}>${e.trim()}</option>`).join("")}</select></div>`;case"select_multiple":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <select class="form-select" id="f_${e.name}" multiple>${(e.choices||"").split(",").map(e=>`<option value="${e.trim()}"${(n||"").split(", ").includes(e.trim())?" selected":""}>${e.trim()}</option>`).join("")}</select></div>`;case"image":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="file" class="form-control" accept="image/*" id="f_${e.name}"></div>`;case"file":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="file" class="form-control" id="f_${e.name}"></div>`;case"note":return`<div class="mb-2"><label>${e.name}</label>\n        <textarea class="form-control" id="f_${e.name}" rows="2" readonly>${n}</textarea></div>`;case"qr":case"barcode":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="text" class="form-control" id="f_${e.name}" value="${n}" placeholder="Scan/Enter code"></div>`;case"geo":return`<div class="mb-2"><label>${e.name}${e.required?" *":""}</label>\n        <input type="text" class="form-control" id="f_${e.name}" value="${n}" placeholder="Latitude,Longitude">\n        <button type="button" class="btn btn-outline-secondary btn-sm mt-1" onclick="navigator.geolocation.getCurrentPosition(pos=>{document.getElementById('f_${e.name}').value=pos.coords.latitude+','+pos.coords.longitude})">\n          <i class="bi bi-geo"></i> Get Location\n        </button>\n      </div>`;case"calculate":return`<div class="mb-2"><label>${e.name}</label>\n        <input type="text" class="form-control" id="f_${e.name}" value="${n}" readonly></div>`;default:return`<div class="mb-2"><label>${e.name}</label>\n        <input type="text" class="form-control" id="f_${e.name}" value="${n}"></div>`}}export function renderServiceEntryForm(e,t=[]){const i=document.getElementById("app"),a=(db.registers||[]).filter(e=>!e.assignedUsers||0===e.assignedUsers.length||db.currentUser&&e.assignedUsers.includes(db.currentUser.username));i.innerHTML=`\n    <div class="container py-3">\n      <h4><i class="bi bi-clipboard-plus"></i> Select Service for ${e.name}</h4>\n      <form id="inlineServiceSelector" class="row g-2 mb-3">\n        <div class="col-md-4">\n          <select class="form-select" id="serviceType" required>\n            <option value="">Select Register/Service</option>\n            ${a.map(e=>`<option value="${e.name}">${e.name}</option>`).join("")}\n          </select>\n        </div>\n        <div class="col-md-3">\n          <input type="date" class="form-control" id="visitDate" value="${(new Date).toISOString().slice(0,10)}" max="${(new Date).toISOString().slice(0,10)}" required>\n        </div>\n        <div class="col-md-3">\n          <button class="btn btn-primary w-100"><i class="bi bi-check2"></i> Start Entry</button>\n        </div>\n      </form>\n      <div id="serviceMsg"></div>\n      <a href="#user-dashboard" class="btn btn-link mt-3"><i class="bi bi-arrow-left"></i> Back to Dashboard</a>\n    </div>\n  `,i.querySelector("#inlineServiceSelector").onsubmit=function(t){t.preventDefault();const a=this.serviceType.value,n=this.visitDate.value;if(!a||!n)return void(i.querySelector("#serviceMsg").innerHTML='<div class="alert alert-danger">Please select a service and date.</div>');const r={patientID:e.patientID,patientName:e.name,dob:e.dob,age:e.age,visitDate:n,serviceType:a,timestamp:Date.now()};renderServiceEntry(i,r)}}